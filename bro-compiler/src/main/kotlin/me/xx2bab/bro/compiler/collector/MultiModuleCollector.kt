package me.xx2bab.bro.compiler.collector

import android.support.annotation.VisibleForTesting
import com.alibaba.fastjson.JSON
import me.xx2bab.bro.common.Constants
import me.xx2bab.bro.common.gen.GenOutputs
import me.xx2bab.bro.common.gen.anno.IBroAnnoProcessor
import me.xx2bab.bro.common.util.FileUtils
import me.xx2bab.bro.compiler.util.BroCompileLogger
import java.io.File
import java.util.*
import javax.annotation.processing.ProcessingEnvironment

/**
 * To collect all meta data json files that generated by SingleModuleCollector,
 * and expose them to generators.
 *
 * @see SingleModuleCollector
 *
 * @see IBroAnnoProcessor
 */
class MultiModuleCollector(private val processors: List<IBroAnnoProcessor>,
                           private val processingEnvironment: ProcessingEnvironment,
                           private val fileUtils: FileUtils,
                           private val genOutputs: GenOutputs) {

    private val map: MutableMap<String, MutableList<String>> = HashMap()

    init {
        for (processor in processors) {
            map[processor.javaClass.canonicalName] = ArrayList()
        }
    }

    fun addMetaRecord(singleModuleMetaData: Map<String, List<String>>) {
        for ((key, value) in singleModuleMetaData) {
            (map[key])?.addAll(value)
        }
    }

    fun generate() {
        for (processor in processors) {
            val res = map[processor.javaClass.canonicalName] ?: continue
            res.sortWith(Comparator { t1, t2 -> t1.compareTo(t2) })
            processor.onGenerate(res, genOutputs, processingEnvironment)
        }
    }

    /**
     * To load all bro intermediate files that SingleModuleCollector generated on last step.
     *
     * @param inputPaths A String composited by several directory paths that may contain
     * bro intermediates.
     * @see Constants.MODULE_META_INFO_FILE_SUFFIX
     *
     * @see Constants.ANNO_PROC_ARG_LIB_META_DATA_OUTPUT_PATH
     *
     * @see Constants.ANNO_PROC_ARG_APP_META_DATA_INPUT_PATH
     */
    fun load(inputPaths: String) {
        val splitPaths = inputPaths.split(";").toTypedArray()
        val fileNameFileMaps = mutableMapOf<String, File>()
        for (path in splitPaths) {
            val directory = File(path)
            if (!directory.exists() || !directory.isDirectory) {
                continue
            }
            val childFiles = directory.listFiles()
            if (childFiles == null || childFiles.isEmpty()) {
                continue
            }
            childFiles.forEach {
                if (!fileNameFileMaps.containsKey(it.name)) {
                    fileNameFileMaps[it.name] = it
                }
            }
        }
        fileNameFileMaps.forEach { (_, file) -> loadFile(file) }
    }

    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
    fun loadFile(file: File) {
        BroCompileLogger.i("Processing meta data file: " + file.name)
        if (!file.name.endsWith(Constants.MODULE_META_INFO_FILE_SUFFIX)) {
            return
        }
        val json = fileUtils.readFile(file) ?: return
        val mapJsonObj = JSON.parseObject(json)
        for (key in mapJsonObj.keys) {
            val valueJson = mapJsonObj.getString(key)
            val value = JSON.parseArray(valueJson, String::class.java)
            // The same action as #addMetaRecord(...)
            map[key]?.addAll(value)
        }
    }

    @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE)
    fun getMap(): MutableMap<String, MutableList<String>> {
        return map
    }

}