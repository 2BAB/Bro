package me.xx2bab.bro.compiler.collector;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.function.Consumer;

import javax.annotation.processing.ProcessingEnvironment;

import me.xx2bab.bro.common.anno.AnnotatedElement;
import me.xx2bab.bro.common.gen.GenOutputs;
import me.xx2bab.bro.common.gen.IBroAnnoGenerator;

/**
 * To collect all meta data json files that generated by SingleModuleCollector,
 * and expose them to generators.
 *
 * @see SingleModuleCollector
 * @see IBroAnnoGenerator
 */
public class MultiModuleCollector implements IAnnotationMetaDataCollector<List<AnnotatedElement>> {

    private GenOutputs genOutputs;
    private List<IBroAnnoGenerator> generators;
    private ProcessingEnvironment processingEnvironment;

    private List<AnnotatedElement> entireTable = new ArrayList<>();

    public MultiModuleCollector(GenOutputs genOutputs,
                                ProcessingEnvironment processingEnvironment,
                                List<IBroAnnoGenerator> generators) {
        this.genOutputs = genOutputs;
        this.processingEnvironment = processingEnvironment;
        this.generators = generators;
    }

    @Override
    public List<AnnotatedElement> getMetaData() {
        return entireTable;
    }

    @Override
    public void addMetaRecord(List<AnnotatedElement> singleModuleMetaData) {
        if (singleModuleMetaData != null) {
            entireTable.addAll(singleModuleMetaData);
        }
    }

    @Override
    public void generate() {
        if (generators == null) {
            return;
        }
        entireTable.sort(new Comparator<AnnotatedElement>() {
            @Override
            public int compare(AnnotatedElement t1, AnnotatedElement t2) {
                return t1.name.compareTo(t2.name);
            }
        });
        generators.forEach(new Consumer<IBroAnnoGenerator>() {
            @Override
            public void accept(IBroAnnoGenerator broGenerator) {
                broGenerator.onGenerate(entireTable,
                        genOutputs,
                        processingEnvironment);
            }
        });
    }


}
