package me.xx2bab.bro.compiler.collector;

import java.io.File;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.function.Consumer;

import javax.annotation.processing.Filer;

import me.xx2bab.bro.common.IBroGenerator;
import me.xx2bab.bro.common.anno.AnnotatedElement;

/**
 * To collect all meta data json files that generated by SingleModuleCollector,
 * and expose them to generators.
 *
 * @see SingleModuleCollector
 * @see IBroGenerator
 */
public class MultiModuleCollector implements IAnnotationMetaDataCollector<List<AnnotatedElement>> {

    private Filer filer;
    private String appPackageName;
    private File appAptGenDirectory;
    private File moduleBroBuildDirectory;
    private List<IBroGenerator<List<AnnotatedElement>, Filer>> generators;

    private List<AnnotatedElement> entireTable = new ArrayList<>();

    public MultiModuleCollector(Filer filer,
                                String appPackageName,
                                String appAptGenPath,
                                String moduleBroBuildPath,
                                List<IBroGenerator<List<AnnotatedElement>, Filer>> generators) {
        this.filer = filer;
        this.appPackageName = appPackageName;
        this.appAptGenDirectory = new File(appAptGenPath);
        this.moduleBroBuildDirectory = new File(moduleBroBuildPath);
        this.generators = generators;
    }

    @Override
    public List<AnnotatedElement> getMetaData() {
        return entireTable;
    }

    @Override
    public void addMetaRecord(List<AnnotatedElement> singleModuleMetaData) {
        if (singleModuleMetaData != null) {
            entireTable.addAll(singleModuleMetaData);
        }
    }

    @Override
    public void generate() {
        if (generators == null) {
            return;
        }
        entireTable.sort(new Comparator<AnnotatedElement>() {
            @Override
            public int compare(AnnotatedElement t1, AnnotatedElement t2) {
                return t1.name.compareTo(t2.name);
            }
        });
        generators.forEach(new Consumer<IBroGenerator<List<AnnotatedElement>, Filer>>() {
            @Override
            public void accept(IBroGenerator<List<AnnotatedElement>, Filer> broGenerator) {
                broGenerator.onGenerate(entireTable,
                        filer,
                        appPackageName,
                        appAptGenDirectory,
                        moduleBroBuildDirectory);
            }
        });
    }


}
