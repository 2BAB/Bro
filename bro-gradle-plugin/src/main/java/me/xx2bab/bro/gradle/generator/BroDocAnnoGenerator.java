package me.xx2bab.bro.gradle.generator;

import java.util.List;
import java.util.Map;

import javax.annotation.processing.ProcessingEnvironment;

import me.xx2bab.bro.common.BroProperties;
import me.xx2bab.bro.common.anno.AnnotatedElement;
import me.xx2bab.bro.common.gen.GenOutputs;
import me.xx2bab.bro.common.gen.IBroAnnoGenerator;
import me.xx2bab.bro.common.util.FileUtils;

public class BroDocAnnoGenerator implements IBroAnnoGenerator {


    @Override
    public void onGenerate(List<AnnotatedElement> inputMetaData,
                           GenOutputs genOutputs,
                           ProcessingEnvironment processingEnvironment) {
        StringBuilder builder = new StringBuilder();

        builder.append(MarkdownUtil.makeH1("Bro-Doc")).append("\n");
        builder.append("\nThis doc is Generated by Bro.\n");

        FileUtils.getDefault().writeFile(builder.toString(),
                genOutputs.broBuildDirectory.getAbsolutePath(),
                "Bro-Doc.md");
    }

    public void generateDoc(String rootProjectPath,
                            Map<String, Map<String, BroProperties>> exposeMaps) {
        StringBuilder builder = new StringBuilder();

        builder.append(MarkdownUtil.makeH1("Bro-Doc")).append("\n");

        generate(builder, exposeMaps);

        FileUtils.getDefault().writeFile(builder.toString(), rootProjectPath, "Bro-Doc.md");
    }

    private void generate(StringBuilder builder,
                          Map<String, Map<String, BroProperties>> exposeMaps) {
        builder.append("\nThis doc is Generated by Bro.\n");

        for (Map.Entry<String, Map<String, BroProperties>> entry : exposeMaps.entrySet()) {
            builder.append("\n");
            builder.append(MarkdownUtil.makeH3(entry.getKey()));
            builder.append("\n");
            builder.append(MarkdownUtil.makeTableForTwo(entry.getValue(), "Nick", "PackageName"));
            builder.append("\n");
        }
    }
}
