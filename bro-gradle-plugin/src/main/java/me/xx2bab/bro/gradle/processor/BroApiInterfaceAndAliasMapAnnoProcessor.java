package me.xx2bab.bro.gradle.processor;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;

import me.xx2bab.bro.annotations.BroApi;
import me.xx2bab.bro.common.Constants;
import me.xx2bab.bro.common.IBroApi;
import me.xx2bab.bro.common.gen.GenOutputs;
import me.xx2bab.bro.common.gen.anno.IBroAnnoProcessor;
import me.xx2bab.bro.common.gen.anno.IBroApiInterfaceAndAliasMap;

/**
 * To process the "BroApi.class" annotation and generate [Interface, Alias] map file.
 */
public class BroApiInterfaceAndAliasMapAnnoProcessor implements IBroAnnoProcessor {

    private static final String BRO_API_CLASS = BroApi.class.getCanonicalName();

    private static final TypeName TYPE_STRING_AND_STRING_MAP
            = ParameterizedTypeName.get(Map.class, String.class, String.class);
    private static final TypeName TYPE_STRING_AND_STRING_HASHMAP
            = ParameterizedTypeName.get(HashMap.class, String.class, String.class);


    private static final String FIELD_MAP = "interfaceAliasMap";

    @Override
    public Collection<Class<? extends java.lang.annotation.Annotation>> getSupportedAnnotationTypes() {
        Set<Class<? extends java.lang.annotation.Annotation>> set = new HashSet<>();
        set.add(BroApi.class);
        return set;
    }

    @Override
    public String onCollect(Element element, ProcessingEnvironment processingEnvironment) {
        if (!(element instanceof TypeElement)) {
            return null;
        }
        TypeElement typeElement = (TypeElement) element;
        if (!containBroApi(typeElement.getAnnotationMirrors())) {
            return null;
        }
        String alias = parseClassAlias(typeElement.getAnnotationMirrors());
        if (alias == null || alias.isEmpty()) {
            return null;
        }
        String interfaze = parseApiInterface(typeElement, processingEnvironment);
        if (interfaze == null || interfaze.isEmpty()) {
            return null;
        }

        JSONObject jsonObject = new JSONObject();
        jsonObject.put(interfaze, alias);

        return jsonObject.toJSONString();
    }

    @Override
    public void onGenerate(List<String> inputMetaData,
                           GenOutputs genOutputs,
                           ProcessingEnvironment processingEnvironment) {

        // Extract ClassAlias<->Interface map
        Map<String, String> interfaceAliasMap = new HashMap<>();
        for (String s : inputMetaData) {
            JSONObject jsonObject = JSON.parseObject(s);
            for (String key : jsonObject.keySet()) {
                interfaceAliasMap.put(key, jsonObject.getString(key));
            }
        }

        // Write it down to a java file
        String className = genOutputs.generateClassNameForImplementation(
                IBroApiInterfaceAndAliasMap.class);
        TypeSpec.Builder builder = TypeSpec.classBuilder(className)
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(IBroApiInterfaceAndAliasMap.class);

        builder.addField(TYPE_STRING_AND_STRING_MAP, FIELD_MAP,
                Modifier.PRIVATE, Modifier.FINAL);

        builder.addMethod(generateConstructor(interfaceAliasMap));
        builder.addMethod(generateGetAliasByInterfaceMethod());

        JavaFile file = JavaFile.builder(Constants.GEN_PACKAGE_NAME, builder.build())
                .indent("    ") // with 4 spaces
                .addFileComment("Generated by BroRoutingTableAnnoProcessor.").build();
        try {
            file.writeTo(processingEnvironment.getFiler());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean containBroApi(Collection<? extends AnnotationMirror> collection) {
        for (AnnotationMirror anno : collection) {
            if (anno.getAnnotationType().toString().equals(BRO_API_CLASS)) {
                return true;
            }
        }
        return false;
    }

    private String parseClassAlias(Collection<? extends AnnotationMirror> collection) {
        for (AnnotationMirror anno : collection) {
            if (anno.getAnnotationType().toString().equals(BRO_API_CLASS)) {
                for (Object obj : anno.getElementValues().values()) {
                    return obj.toString().replaceAll("([\"'])", "");
                }
            }
        }
        return null;
    }

    private String parseApiInterface(TypeElement element, ProcessingEnvironment pe) {
        for (TypeMirror mirror : element.getInterfaces()) {
            String result = parseApiInterfaceInternal(mirror.toString(), pe);
            if (result != null) {
                return mirror.toString();
            }
        }
        return null;
    }

    private String parseApiInterfaceInternal(String interfaceCanonicalName,
                                             ProcessingEnvironment pe) {
        TypeElement typeElement = pe.getElementUtils().getTypeElement(interfaceCanonicalName);
        if (typeElement != null && typeElement.getInterfaces().size() > 0) {
            List<? extends TypeMirror> interfaces = typeElement.getInterfaces();
            for (TypeMirror childInterface : interfaces) {
                if (childInterface.toString().equals(IBroApi.class.getCanonicalName())) {
                    return typeElement.toString();
                }
                String childResult = parseApiInterfaceInternal(childInterface.toString(), pe);
                if (childResult != null) {
                    return childResult;
                }
            }
        }
        return null;
    }

    private MethodSpec generateConstructor(Map<String, String> interfaceAliasMap) {
        final MethodSpec.Builder builder = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addCode(CodeBlock.builder().addStatement(FIELD_MAP + " = new $T()",
                        TYPE_STRING_AND_STRING_HASHMAP).build());

        for (String key : interfaceAliasMap.keySet()) {
            builder.addStatement(FIELD_MAP + ".put(\"" + key + "\", \""
                    + interfaceAliasMap.get(key) + "\")");
        }

        return builder.build();
    }

    /**
     * Implements the #getAliasByInterface(String interfaze) method
     * from IBroApiInterfaceAndAliasMap.class.
     *
     * @return The MethodSpec object used by JavaPoet.
     */
    private MethodSpec generateGetAliasByInterfaceMethod() {
        String param = "interfaze";
        return MethodSpec.methodBuilder("getAliasByInterface")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .addParameter(String.class, param)
                .returns(String.class)
                .addStatement("return " + FIELD_MAP + ".get(" + param + ")")
                .build();
    }
}
